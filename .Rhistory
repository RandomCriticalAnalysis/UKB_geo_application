temp
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( !grepl("PC",variable)) %>%
mutate(type =
ifelse(variable %in% list_PRS, "no correction",
ifelse(variable %in% list_PRS_reg_UKB, "using UKB PCs",
ifelse(variable %in% list_PRS_reg_1kG, "using 1kG PCs",
"nope")))) %>%
mutate( variable = variable %>% gsub(".1kG_residual", "",. ) %>% gsub(".residual", "",. ) %>% gsub(".1kG", "",. ) ) %>%
mutate( variable = fct_reorder(variable, statistic, fun=max) )
"nope"))) %>%
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( !grepl("PC",variable)) %>%
mutate(type =
ifelse(variable %in% list_PRS, "no correction",
ifelse(variable %in% list_PRS_reg_UKB, "using UKB PCs",
ifelse(variable %in% list_PRS_reg_1kG, "using 1kG PCs",
"nope"))) %>%
mutate( variable = variable %>% gsub(".1kG_residual", "",. ) %>% gsub(".residual", "",. ) %>% gsub(".1kG", "",. ) ) %>%
mutate( variable = fct_reorder(variable, statistic, fun=max) )
extreme <- temp %>%
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( !grepl("PC",variable)) %>%
mutate(type =
ifelse(variable %in% list_PRS, "no correction",
ifelse(variable %in% list_PRS_reg_UKB, "using UKB PCs",
ifelse(variable %in% list_PRS_reg_1kG, "using 1kG PCs",
"nope")))) %>%
mutate( variable = variable %>% gsub(".1kG_residual", "",. ) %>% gsub(".residual", "",. ) %>% gsub(".1kG", "",. ) ) %>%
mutate( variable = fct_reorder(variable, statistic, fun=max) )
library(tidyverse)
library(epuRate)
library(rmarkdown)
setwd("/Users/y.holtz/Dropbox/QBI/15_ABDEL_UKB_MAP/UKB_geo_application")
load("DATA/Spatial_Autocor.Rdata")
# Geospatial object (=map boundaries + value of each region):
load("DATA/Abdel_data.Rdata")
# Spatial Autocorrelation values:
load("DATA/Spatial_Autocor.Rdata")
# I transform it in a reactive value
all=colnames(GBR_region@data)
list_PC_UKB = all[ grepl("^PC", all ) & !grepl("1kG", all ) ]
list_PC_1KG = all[ grepl("^PC", all ) & grepl("1kG", all ) ]
list_PRS_reg_UKB = all[ grepl("\\.residual", all )  ]
list_PRS_reg_1KG = all[ grepl("_residual", all )  ]
list_PRS=all[ !all %in% c(list_PC_UKB, list_PC_1KG, list_PRS_reg_UKB, list_PRS_reg_1KG)]
library(tidyverse)
library(epuRate)
library(rmarkdown)
setwd("/Users/y.holtz/Dropbox/QBI/15_ABDEL_UKB_MAP/UKB_geo_application")
load("DATA/Spatial_Autocor.Rdata")
# Geospatial object (=map boundaries + value of each region):
load("DATA/Abdel_data.Rdata")
# Spatial Autocorrelation values:
load("DATA/Spatial_Autocor.Rdata")
# I transform it in a reactive value
all=colnames(GBR_region@data)
list_PC_UKB = all[ grepl("^PC", all ) & !grepl("1kG", all ) ]
list_PC_1KG = all[ grepl("^PC", all ) & grepl("1kG", all ) ]
list_PRS_reg_UKB = all[ grepl("\\.residual", all )  ]
list_PRS_reg_1KG = all[ grepl("_residual", all )  ]
list_PRS=all[ !all %in% c(list_PC_UKB, list_PC_1KG, list_PRS_reg_UKB, list_PRS_reg_1KG)]
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( !grepl("PC",variable)) %>%
mutate(type =
ifelse(variable %in% list_PRS, "no correction",
ifelse(variable %in% list_PRS_reg_UKB, "using UKB PCs",
ifelse(variable %in% list_PRS_reg_1kG, "using 1kG PCs",
"nope")))) %>%
mutate( variable = variable %>% gsub(".1kG_residual", "",. ) %>% gsub(".residual", "",. ) %>% gsub(".1kG", "",. ) ) %>%
mutate( variable = fct_reorder(variable, statistic, fun=max) )
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( !grepl("PC",variable)) %>%
mutate(type =
ifelse(variable %in% list_PRS, "no correction",
ifelse(variable %in% list_PRS_reg_UKB, "using UKB PCs",
ifelse(variable %in% list_PRS_reg_1KG, "using 1kG PCs",
"nope")))) %>%
mutate( variable = variable %>% gsub(".1kG_residual", "",. ) %>% gsub(".residual", "",. ) %>% gsub(".1kG", "",. ) ) %>%
mutate( variable = fct_reorder(variable, statistic, fun=max) )
extreme <- temp %>%
group_by( variable) %>%
summarize(mymax=max(statistic), mymin=min(statistic))
ggplot() +
geom_segment( data=extreme, aes(x=variable, xend=variable, y=mymin, yend=mymax), color="grey", size=1 )  +
geom_point( data=temp, aes(x=variable, y=statistic, color=as.factor(type)), size=5) +
coord_flip() +
ylab("Moran I value") +
xlab("") +
theme_minimal() +
theme( axis.text=element_text(size=13))
ggplot() +
geom_segment( data=extreme, aes(x=variable, xend=variable, y=mymin, yend=mymax), color="grey", size=1 )  +
geom_point( data=temp, aes(x=variable, y=statistic, color=as.factor(type)), size=5) +
coord_flip() +
ylab("Moran I value") +
xlab("") +
theme_minimal() +
theme( axis.text=element_text(size=13)) +
labs(color="Type of correction")
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("PC",variable))
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable))
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0))
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0))
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type) %>%
spread(key=type, value=value)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type)
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type) %>%
spread(key=type, value=statistic)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type) %>%
spread(key=type, value=statistic)
temp <- moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, 1, 0)) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, "1kG", "UKB")) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic) %>%
ggplot() +
geom_point( aes(x=1kG, y=UKB), size=5)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, "1kG", "UKB")) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, "kG", "UKB")) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic) %>%
ggplot( aes(x=kG, y=UKB) ) +
geom_point( , size=5)
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, "kG", "UKB")) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic) %>%
ggplot( aes(x=kG, y=UKB) ) +
geom_point( )
moran_data %>%
data.frame() %>%
rownames_to_column(var = "variable") %>%
filter( grepl("^PC",variable)) %>%
mutate(type = ifelse(grepl("k",variable)==TRUE, "kG", "UKB")) %>%
select(variable, statistic, type) %>%
mutate(variable = gsub(".1kG", "", variable)) %>%
spread(key=type, value=statistic) %>%
ggplot( aes(x=kG, y=UKB) ) +
geom_point( )
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment
# Library
library(forcats)
library(tidyverse)
# We will consider 2 data sets. Data has one value per group, mpg has several values per group.
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
mpg
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name))
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point() +
coord_flip()
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip()
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_classic()
# ----- USING DPLYR
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
data %>%
arrange(val) %>%
mutate(name = factor(name, levels="north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
q
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip()
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
theme_bw()
# ----- USING REORDER (BASER)
# Close to order, but made to change the order of the factor levels.
iris
iris$Species = with(iris, reorder(Species, Sepal.Width, mean))
ggplot(iris, aes(x=Species, y=Sepal.Width)) +
geom_violin()
ggplot(iris, aes(x=Species, y=Sepal.Width, color=Species)) +
geom_violin()
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin()
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin() +
theme(legend.position="none")
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin(alpha=0.6) +
theme(legend.position="none")
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin(alpha=0.6) +
theme(legend.position="none")
# ---------------------------------------------------------------------------------------------------------------------------------------------------------
# 267 ORDER FACTORS FOR GGPLOT2
# Read - http://r4ds.had.co.nz/factors.html
# We need to reorder the factor levels, not the dataframe !!!
# Library
library(forcats)
library(tidyverse)
# We will consider 2 data sets. Data has one value per group, mpg has several values per group.
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
mpg
# A reordered barplot that does not work:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_1.png", width=480, height=480)
data %>%
arrange(val) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# Reorder following the value of another column:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_2.png", width=480, height=480)
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# Reverse side
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_3.png", width=480, height=480)
data %>%
mutate(name = fct_reorder(name, desc(val))) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# If you have several values per factor level? You can use whatever function:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_4.png", width=480, height=480)
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_5.png", width=480, height=480)
dev.off()
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
dev.off()
# Reorder following a precise order
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_6.png", width=480, height=480)
data %>%
mutate(name = fct_relevel(name, "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
dev.off()
# ----- USING DPLYR
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_7.png", width=480, height=480)
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_8.png", width=480, height=480)
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
theme_bw()
dev.off()
# ----- USING REORDER (BASER)
# Close to order, but made to change the order of the factor levels.
iris
iris$Species = with(iris, reorder(Species, Sepal.Width, mean))
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_9.png", width=480, height=480)
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin(alpha=0.6) +
theme(legend.position="none")
dev.off()
# ---------------------------------------------------------------------------------------------------------------------------------------------------------
# ---------------------------------------------------------------------------------------------------------------------------------------------------------
# 267 ORDER FACTORS FOR GGPLOT2
# Read - http://r4ds.had.co.nz/factors.html
# We need to reorder the factor levels, not the dataframe !!!
# Library
library(forcats)
library(tidyverse)
# We will consider 2 data sets. Data has one value per group, mpg has several values per group.
data <- data.frame(
name=c("north","south","south-east","north-west","south-west","north-east","west","east"),
val=sample(seq(1,10), 8 )
)
mpg
# A reordered barplot that does not work:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_1.png", width=480, height=480)
data %>%
arrange(val) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# Reorder following the value of another column:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_2.png", width=480, height=480)
data %>%
mutate(name = fct_reorder(name, val)) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# Reverse side
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_3.png", width=480, height=480)
data %>%
mutate(name = fct_reorder(name, desc(val))) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity") +
coord_flip()
dev.off()
# If you have several values per factor level? You can use whatever function:
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_4.png", width=480, height=480)
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=median)) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_5.png", width=480, height=480)
mpg %>%
mutate(class = fct_reorder(class, hwy, fun=length )) %>%
ggplot( aes(x=class, y=hwy, fill=class)) +
geom_boxplot() +
xlab("class") +
theme(legend.position="none")
dev.off()
# Reorder following a precise order
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_6.png", width=480, height=480)
data %>%
mutate(name = fct_relevel(name, "north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west")) %>%
ggplot( aes(x=name, y=val)) +
geom_bar(stat="identity")
dev.off()
# ----- USING DPLYR
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_7.png", width=480, height=480)
data %>%
arrange(val) %>%
mutate(name=factor(name, levels=name)) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
coord_flip() +
theme_bw()
dev.off()
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_8.png", width=480, height=480)
data %>%
arrange(val) %>%
mutate(name = factor(name, levels=c("north", "north-east", "east", "south-east", "south", "south-west", "west", "north-west"))) %>%
ggplot( aes(x=name, y=val)) +
geom_segment( aes(xend=name, yend=0)) +
geom_point( size=4, color="orange") +
theme_bw()
dev.off()
# ----- USING REORDER (BASER)
# Close to order, but made to change the order of the factor levels.
iris
iris$Species = with(iris, reorder(Species, Sepal.Width, mean))
png("~/Dropbox/R_GG/R_GRAPH/#267_reorder_in_ggplot2_9.png", width=480, height=480)
ggplot(iris, aes(x=Species, y=Sepal.Width, fill=Species)) +
geom_violin(alpha=0.6) +
theme(legend.position="none")
dev.off()
# ---------------------------------------------------------------------------------------------------------------------------------------------------------
