)
my_title <- expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
getwd()
setwd("/Users/y.holtz/Dropbox/R_GG/R_GRAPH
")
setwd("/Users/y.holtz/Dropbox/R_GG/R_GRAPH")
# library & data
library(ggplot2)
data=data.frame(x=rnorm(100))
# Basic plot with title
png("#289_custom_ggplot2_title1.png" , width = 480, height = 480 )
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal()
dev.off()
# title on several lines
png("#289_custom_ggplot2_title2.png" , width = 480, height = 480 )
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue \nHistogram") +
theme_minimal()
dev.off()
# Custom title appearance
png("#289_custom_ggplot2_title3.png" , width = 480, height = 480 )
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.5) +
ggtitle("A blue Histogram") +
theme_minimal() +
theme(
plot.title=element_text(family='', face='bold', colour='purple', size=26)
)
dev.off()
# Adjust the position of title
png("#289_custom_ggplot2_title4.png" , width = 480, height = 480 )
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle("With title on the right") +
theme_minimal() +
theme(
plot.title=element_text( hjust=1, vjust=0.5, face='bold')
)
dev.off()
# Custom a few word of the title only:
png("#289_custom_ggplot2_title5.png" , width = 480, height = 480 )
my_title <- expression(paste("A ", italic(bold("blue")), " histogram"))
ggplot( data=data, aes(x=x)) +
geom_histogram(fill="skyblue", alpha=0.8) +
ggtitle(my_title) +
theme_minimal()
dev.off()
https://hopstat.wordpress.com/2014/06/10/making-back-to-back-histograms/
# libraries
library(ggplot2)
# Prepare 2 vectors, one per sex
data=data.frame(
set1=rnorm(1000, mean=10, sd=3),
set2=rnorm(1000, mean=5, sd=5)
)
# Plot
ggplot(data) +
geom_density( aes(x = set1, y = ..density..), fill="pink", alpha=0.3) +
geom_density( aes(x = set2, y = -..density..), fill="blue", alpha=0.3) +
xlab("Name of the numeric variable")
ggplot(data) +
geom_density( aes(x = set1, y = ..density..), fill="pink", alpha=0.3) +
geom_density( aes(x = set2, y = -..density..), fill="blue", alpha=0.3) +
xlab("Name of the numeric variable")+
coord_flip()
install.packages("prettydoc")
library("prettydoc")
dim(gsmr_data)
library("gsmr")
data("gsmr")
gsmr_data
dim(gsmr_data)
library("gsmr")
data("gsmr")
gsmr_data
summary(gsmr_data)
write.table(gsmr_data[,c(1,2)], "gsmr_example_snps.allele", col.names=F, row.names=F, quote=F)
getwd()
library(gsmr)
snp_coeff_id = scan("gsmr_example.xmat.gz", what="", nlines=1)
snp_coeff_id
snp_coeff = read.table("gsmr_example.xmat.gz", header=F, skip=2)
snp_coeff
snp_coeff_id
gsmr_data$SNP
snp_coeff_id
Reduce(intersect, list(gsmr_data$SNP, snp_coeff_id))
# Take the same SNPs with same order
snp_id = Reduce(intersect, list(gsmr_data$SNP, snp_coeff_id))
gsmr_data = gsmr_data[match(snp_id, gsmr_data$SNP),]
snp_order = match(snp_id, snp_coeff_id)
snp_coeff_id = snp_coeff_id[snp_order]
snp_coeff = snp_coeff[, snp_order]
snp_coeff
snp_coeff_id
# Calculate LD correlation matrix
ldrho = cor(snp_coeff)
ldrho
heatmap(ldrho)
# Check the size of the correlation matrix and double-check if the order of the SNPs in the LD correlation matrix is consistent with that in the GWAS summary data
colnames(ldrho) = rownames(ldrho) = snp_coeff_id
colnames(ldrho)
bzx = gsmr_data$std_bzx    # SNP effects on risk factor
bzx_se = gsmr_data$std_bzx_se    # standard errors of bzx
bzx_pval = gsmr_data$bzx_pval   # p-values for bzx
bzy = gsmr_data$bzy    # SNP effects on disease
bzy_se = gsmr_data$bzy_se    # standard errors of bzy
bzy_pval = gsmr_data$bzy_pval    # p-values for bzy
n_ref = 7703    # Sample size of the reference sample
gwas_thresh = 5e-8    # GWAS threshold to select SNPs as the instruments for the GSMR analysis
heidi_outlier_thresh = 0.01    # HEIDI-outlier threshold
nsnps_thresh = 10   # the minimum number of instruments required for the GSMR analysis
heidi_outlier_flag = T    # flag for HEIDI-outlier analysis
ld_fdr_thresh = 0.05   # FDR threshold to remove the chance correlations between SNP instruments
gsmr_results = gsmr(bzx, bzx_se, bzx_pval, bzy, bzy_se, ldrho, snp_coeff_id, n_ref, heidi_outlier_flag, gwas_thresh, heidi_outlier_thresh, nsnps_thresh, ld_fdr_thresh)    # GSMR analysis
cat("Effect of exposure on outcome: ",gsmr_results$bxy)
gsmr_results = gsmr(bzx, bzx_se, bzx_pval, bzy, bzy_se, ldrho, snp_coeff_id, n_ref, heidi_outlier_flag, gwas_thresh, heidi_outlier_thresh, nsnps_thresh, ld_fdr_thresh)    # GSMR analysis
library("gsmr")
data("gsmr")
gsmr_data
write.table(gsmr_data[,c(1,2)], "/Users/y.holtz/Dropbox/QBI/4_UK_BIOBANK_GWAS_PROJECT/3_GWAS_AND_MR_ON_SCHYZO/gsmr_example_snps.allele", col.names=F, row.names=F, quote=F)
library(gsmr)
data("gsmr")
snp_coeff_id = scan("gsmr_example.xmat.gz", what="", nlines=1)
snp_coeff = read.table("gsmr_example.xmat.gz", header=F, skip=2)
# Take the same SNPs with same order
snp_id = Reduce(intersect, list(gsmr_data$SNP, snp_coeff_id))
gsmr_data = gsmr_data[match(snp_id, gsmr_data$SNP),]
snp_order = match(snp_id, snp_coeff_id)
snp_coeff_id = snp_coeff_id[snp_order]
snp_coeff = snp_coeff[, snp_order]
# Calculate LD correlation matrix
ldrho = cor(snp_coeff)
# Check the size of the correlation matrix and double-check if the order of the SNPs in the LD correlation matrix is consistent with that in the GWAS summary data
colnames(ldrho) = rownames(ldrho) = snp_coeff_id
a=as.data.frame( ldrho[1:5, 1:5] )
a
bzx = gsmr_data$std_bzx    # SNP effects on risk factor
bzx_se = gsmr_data$std_bzx_se    # standard errors of bzx
bzx_pval = gsmr_data$bzx_pval   # p-values for bzx
bzy = gsmr_data$bzy    # SNP effects on disease
bzy_se = gsmr_data$bzy_se    # standard errors of bzy
bzy_pval = gsmr_data$bzy_pval    # p-values for bzy
n_ref = 7703    # Sample size of the reference sample
gwas_thresh = 5e-8    # GWAS threshold to select SNPs as the instruments for the GSMR analysis
heidi_outlier_thresh = 0.01    # HEIDI-outlier threshold
nsnps_thresh = 10   # the minimum number of instruments required for the GSMR analysis
heidi_outlier_flag = T    # flag for HEIDI-outlier analysis
ld_fdr_thresh = 0.05   # FDR threshold to remove the chance correlations between SNP instruments
gsmr_results = gsmr(bzx, bzx_se, bzx_pval, bzy, bzy_se, ldrho, snp_coeff_id, n_ref, heidi_outlier_flag, gwas_thresh, heidi_outlier_thresh, nsnps_thresh, ld_fdr_thresh)    # GSMR analysis
length(bzx)
gsmr_data
snpfreq = gsmr_data$freq             # minor allele frequencies of SNPs
bzx = gsmr_data$bzx     # effects of instruments on risk factor
bzx_se = gsmr_data$bzx_se       # standard errors of bzx
bzx_n = gsmr_data$bzx_n          # sample size for GWAS of the risk factor
std_zx = std_effect(snpfreq, bzx, bzx_se, bzx_n)    # perform standardize
gsmr_data$std_bzx = std_zx$b    # standardized bzx
gsmr_data$std_bzx_se = std_zx$se    # standardized bzx_se
head(gsmr_data)
bzx = gsmr_data$std_bzx    # SNP effects on risk factor
bzx_se = gsmr_data$std_bzx_se    # standard errors of bzx
bzx_pval = gsmr_data$bzx_pval   # p-values for bzx
bzy = gsmr_data$bzy    # SNP effects on disease
bzy_se = gsmr_data$bzy_se    # standard errors of bzy
bzy_pval = gsmr_data$bzy_pval    # p-values for bzy
n_ref = 7703    # Sample size of the reference sample
gwas_thresh = 5e-8    # GWAS threshold to select SNPs as the instruments for the GSMR analysis
heidi_outlier_thresh = 0.01    # HEIDI-outlier threshold
nsnps_thresh = 10   # the minimum number of instruments required for the GSMR analysis
heidi_outlier_flag = T    # flag for HEIDI-outlier analysis
ld_fdr_thresh = 0.05   # FDR threshold to remove the chance correlations between SNP instruments
gsmr_results = gsmr(bzx, bzx_se, bzx_pval, bzy, bzy_se, ldrho, snp_coeff_id, n_ref, heidi_outlier_flag, gwas_thresh, heidi_outlier_thresh, nsnps_thresh, ld_fdr_thresh)    # GSMR analysis
cat("Effect of exposure on outcome: ",gsmr_results$bxy)
# run the heidi outlier detection:
filtered_index = heidi_outlier(bzx, bzx_se, bzx_pval, bzy, bzy_se, ldrho, snp_coeff_id, n_ref, gwas_thresh, heidi_outlier_thresh, nsnps_thresh, ld_fdr_thresh)
filtered_index
length(filtered_index)
#
gsmr_data
ggplot( gsmr_data, aes(x=bzx_pval, y=bzy_pval)) +
geom_point()
filtered_index
# Can we check which SNPs are these SNPs?
gsmr_data$kept="no"
gsmr_data$kept[filtered_index]="yes"
gsmr_data
ggplot( gsmr_data, aes(x=bzx_pval, y=bzy_pval, color=kept)) +
geom_point()
gsmr_data
gsmr_results = bi_gsmr(bzx, bzx_se, bzx_pval, bzy, bzy_se, bzy_pval, ldrho, snp_coeff_id, n_ref, heidi_outlier_flag, gwas_thresh, heidi_outlier_thresh, ld_fdr_thresh)
cat("Effect of risk factor on disease: ",gsmr_results$forward_bxy)
gsmr_results
effect_col = colors()[75]
vals = c(bzx[filtered_index]-bzx_se[filtered_index], bzx[filtered_index]+bzx_se[filtered_index])
xmin = min(vals); xmax = max(vals)
vals = c(bzy[filtered_index]-bzy_se[filtered_index], bzy[filtered_index]+bzy_se[filtered_index])
ymin = min(vals); ymax = max(vals)
par(mar=c(5,5,4,2))
plot(bzx[filtered_index], bzy[filtered_index], pch=20, cex=0.8, bty="n", cex.axis=1.1, cex.lab=1.2,
col=effect_col, xlim=c(xmin, xmax), ylim=c(ymin, ymax),
xlab=expression(LDL~cholesterol~(italic(b[zx]))),
ylab=expression(Coronary~artery~disease~(italic(b[zy]))))
abline(0, gsmr_results$forward_bxy, lwd=1.5, lty=2, col="dim grey")
vals = c(bzx[filtered_index]-bzx_se[filtered_index], bzx[filtered_index]+bzx_se[filtered_index])
vals
plot(bzx[filtered_index], bzy[filtered_index]
plot(bzx[filtered_index], bzy[filtered_index]q
plot(bzx[filtered_index], bzy[filtered_index])
bzx
gsmr_data
ggplot(gsmr_data, aes(x=bzx_pval, y=bzy_pval)) +
geom_point()
gsmr_data
ggplot(gsmr_data, aes(x=bzx_pval, y=bzy_pval)) +
geom_point()
ggplot(gsmr_data, aes(x=std_bzx, y=bzy )) +
geom_point()
ggplot(gsmr_data[filtered_index,], aes(x=std_bzx, y=bzy )) +
geom_point()
ggplot(gsmr_data[filtered_index,], aes(x=std_bzx, y=bzy )) +
geom_point() +
geom_abline()
ggplot(gsmr_data[filtered_index,], aes(x=std_bzx, y=bzy )) +
geom_point() +
geom_abline()
library(ggplot2)
ggplot(gsmr_data[filtered_index,], aes(x=std_bzx, y=bzy )) +
geom_point() +
geom_abline()
ggplot(gsmr_data[filtered_index,], aes(x=std_bzx, y=bzy )) +
geom_point() +
geom_abline() +
coord_equal()
library("gsmr")
mlibrary(ggplot2)
# library
library(dplyr)
# Hexbin available in the geojson format here: https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map. Download it and then:
library(geojsonio)
spdf <- geojson_read("us_states_hexgrid.geojson.json",  what = "sp")
# I need to 'fortify' the data to be able to show it with ggplot2 (we need a data frame format)
library(broom)
spdf@data = spdf@data %>% mutate(google_name = gsub(" \\(United States\\)", "", google_name))
spdf_fortified <- tidy(spdf, region = "google_name")
# Calculate the centroid of each hexagon to add the label:
library(rgeos)
centers <- cbind.data.frame(data.frame(gCentroid(spdf, byid=TRUE), id=spdf@data$iso3166_2))
# Now I can plot this shape easily as described before:
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="skyblue", color="white") +
geom_text(data=centers, aes(x=x, y=y, label=id)) +
theme_void() +
coord_map()
setwd("/Users/y.holtz/Desktop")
# library
library(dplyr)
# Hexbin available in the geojson format here: https://team.carto.com/u/andrew/tables/andrew.us_states_hexgrid/public/map. Download it and then:
library(geojsonio)
spdf <- geojson_read("us_states_hexgrid.geojson.json",  what = "sp")
# I need to 'fortify' the data to be able to show it with ggplot2 (we need a data frame format)
library(broom)
spdf@data = spdf@data %>% mutate(google_name = gsub(" \\(United States\\)", "", google_name))
spdf_fortified <- tidy(spdf, region = "google_name")
# Calculate the centroid of each hexagon to add the label:
library(rgeos)
centers <- cbind.data.frame(data.frame(gCentroid(spdf, byid=TRUE), id=spdf@data$iso3166_2))
# Now I can plot this shape easily as described before:
ggplot() +
geom_polygon(data = spdf_fortified, aes( x = long, y = lat, group = group), fill="skyblue", color="white") +
geom_text(data=centers, aes(x=x, y=y, label=id)) +
theme_void() +
coord_map()
# CARTOGRAM
library(cartogram)
spdf@data$value=sample(seq(1,100), nrow(spdf@data))
carto <- cartogram(spdf, 'value')
carto@data
plot(carto)
setwd("/Users/y.holtz/Dropbox/QBI/15_ABDEL_UKB_MAP/UKB_geo_application")
# Distribution of the number of people per region / hexagone?
load("DATA/Abdel_data.Rdata")
GBR_hexa@data %>%
ggplot( aes(x=nb_people) )+
geom_histogram(bins=100)
plot(GBR_hexa)
plot(GBR_hexa_cartogram)
# Cartogram ppur shenf
spdf_fortified <- tidy(GBR_hexa_cartogram)
GBR_hexa_cartogram@data %>% head()
# Cartogram ppur shenf
spdf_fortified <- tidy(GBR_hexa_cartogram, region=geo_label)
# Cartogram ppur shenf
spdf_fortified <- tidy(GBR_hexa_cartogram, region="geo_label")
head(spdf_fortified)
spdf_fortified = spdf_fortified %>% left_join(. , GBR_hexa_cartogram@data, by=c("id"="geo_label"))
head(spdf_fortified)
# As seen before, we can do better with a bit of customization
library(viridis)
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = POP2005, x = long, y = lat, group = group) , size=0, alpha=0.9) +
theme_void() +
scale_fill_viridis(trans = "log", breaks=c(1,5,10,20,50,100), name="Number of restaurant", guide = guide_legend( keyheight = unit(3, units = "mm"), keywidth=unit(12, units = "mm"), label.position = "bottom", title.position = 'top', nrow=1) ) +
labs(
title = "South of France Restaurant concentration",
subtitle = "Number of restaurant per city district",
caption = "Data: INSEE | Creation: Yan Holtz | r-graph-gallery.com"
) +
theme(
text = element_text(color = "#22211d"),
plot.background = element_rect(fill = "#f5f5f2", color = NA),
panel.background = element_rect(fill = "#f5f5f2", color = NA),
legend.background = element_rect(fill = "#f5f5f2", color = NA),
plot.title = element_text(size= 22, hjust=0.01, color = "#4e4d47", margin = margin(b = -0.1, t = 0.4, l = 2, unit = "cm")),
plot.subtitle = element_text(size= 17, hjust=0.01, color = "#4e4d47", margin = margin(b = -0.1, t = 0.43, l = 2, unit = "cm")),
plot.caption = element_text( size=12, color = "#4e4d47", margin = margin(b = 0.3, r=-99, unit = "cm") ),
legend.position = c(0.7, 0.09)
) +
coord_map()
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) , size=0, alpha=0.9) +
theme_void() +
plot(GBR_hexa_cartogram)
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) , size=0, alpha=0.9) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=PC1, x = long, y = lat, group = group) , size=0, alpha=0.9) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=PC1, x = long, y = lat, group = group) , size=0, alpha=0.9, width=3) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=PC1, x = long, y = lat, group = group) , size=0, alpha=0.9, size=3) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=3) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=-PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=rev(PC1), x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=rev(PC1), x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_brewer(direction=-1)
help(scale_fill_brewer)
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=rev(PC1), x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_brewer() +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, color=rev(PC1), x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_brewer(palette="Blues") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_brewer(palette="Blues") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
#scale_fill_brewer(palette="Blues") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="Blues") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="Blues", direction=-1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="Blues", direction=1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = PC1, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="BuPu", direction=-1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="BuPu", direction=-1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="Blues", direction=-1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="BuPu", direction=1) +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette="BuPu", direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=1, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=1, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=2, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=4, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=5, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=6, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=7, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=8, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=9, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
svg("/Users/y.holtz/Desktop/map_shenf_svg.svg",width=14,height=7)
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=9, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
dev.off()
svg("/Users/y.holtz/Desktop/map_shenf_svg.svg",width=8,height=16)
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=9, direction=1, trans="log") +
theme_void() +
theme(legend.position="none")
dev.off()
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=9, direction=1, trans="log") +
theme_void() +
theme(legend.position="none") +
coord_map()
svg("/Users/y.holtz/Desktop/map_shenf_svg.svg")
ggplot() +
geom_polygon(data = spdf_fortified, aes(fill = nb_people, x = long, y = lat, group = group) ,  alpha=0.9, size=0.4) +
scale_fill_distiller(palette=9, direction=1, trans="log") +
theme_void() +
theme(legend.position="none") +
coord_map()
dev.off()
Sys.date()
Sys.Date()
